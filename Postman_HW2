						//HW_2 Postman (GET/first)
//1.Отправить запрос.
//2.Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//3.Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

						//HW_2 Postman (POST/user_info_3)
//.1 Отправить запрос статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//.2 Спарсить response body в json.
var jsonData = pm.response.json();
//.3 Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Check name",function (){
    pm.expect(jsonData.name).to.eql("Olga")
});
//.4 Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Check age",function (){
  pm.expect(jsonData.age).to.eql("35")  
});
//.5 Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Check salary", function () {
    pm.expect(jsonData.salary).to.eql(3500);
});
//.6 Спарсить request.
var request_Data = request.data;
//.7 Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check name",function (){
    pm.expect(jsonData.name).to.eql(request.data.name)
});
//.8 Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Check age",function (){
    pm.expect(jsonData.age).to.eql(request.data.age)
});
//.9 Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Check salary",function (){
    pm.expect(jsonData.salary).to.eql(+request.data.salary)
});
//.10 Вывести в консоль параметр family из response.
var resp_family=jsonData.family
console.log("resp_family:"+resp_family);
console.log("resp_family:",resp_family);
//.11 Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
var request_Data = request.data;
var jsonData = pm.response.json();
pm.test("Check salary*4",function (){
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.data.salary*4)
});

						//HW_2 Postman (POST/object_info_3)
//.1 Отправить запрос статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//.2 Спарсить respons body в json
var jsonData=pm.response.json();
//.3 Спарсить request
//var request_Data=request.data;
var requestData=pm.request.url.query.toObject();
//.4 Проверить, что name в ответе равно name с request (name забрать из request)
pm.test("Check name",function (){
    pm.expect(jsonData.name).to.eql(requestData.name)
});
//.5 Проверить, что age в ответе равно age с request (name забрать из request)
pm.test("Check age",function (){
    pm.expect(jsonData.age).to.eql(requestData.age)
});
//.6 Проверить, что salary в ответе равно salary с request (salary забрать из request)
pm.test("Check salary",function (){
    pm.expect(jsonData.salary).to.eql(+requestData.salary)
});
//.7 Вывести в консоль параметры family из response
console.log ("response:",jsonData.family)
//.8 Проверить, что у параметра dog есть параметры name
var jsonData=pm.response.json();
pm.test("Check dog has name",function (){
    pm.expect(jsonData.family.pets.dog).to.have.property("name")
});
//.9 Проверить, что у параметра dog есть параметры age
pm.test("Check dog has age",function (){
    pm.expect(jsonData.family.pets.dog).to.have.property("age")
});
//.10 Проверить, что у параметр name имеет значение Luky
pm.test("Check dog_name Luky",function (){
    pm.expect(jsonData.family.pets.dog.name).to.eql("Luky")
});
//.11 Проверить, что у параметр age имеет значение 4
pm.test("Check dog_age_4",function (){
    pm.expect(jsonData.family.pets.dog.age).to.eql(4)
});

					//HW_2 Postman (GET/user_info_4)
//.1 Отправить запрос статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//.2 Спарсить respons body В json
var jsonData=pm.response.json();
//.3 Спарсить request
var requestData=pm.request.url.query.toObject();
//.4 Проверить, что name в ответе равно name с request (name забрать из request)
pm.test("Check name",function (){
    pm.expect(jsonData.name).to.eql(requestData.name)
});
console.log(jsonData.name);
//.5 Проверить, что age в ответе равно age с request (name забрать из request)
pm.test("Check age",function (){
    pm.expect(jsonData.age).to.eql(+requestData.age)
});
//.6 Вывести в консоль параметры salary из response
console.log ("response:",jsonData.salary)
//.7 Вывести в консоль 0-й элемент параметра salary из response
console.log ("response:",jsonData.salary[0])
//.8 Вывести в консоль 1-й элемент параметра salary из response
console.log ("response:",jsonData.salary[1])
//.9 Вывести в консоль 2-й элемент параметра salary из response
console.log ("response:",jsonData.salary[2])
//.10 Проверить, что 0-й элемент параметра salary равен salary из request (salare забрать из request)
pm.test("Check salary_0",function (){
    pm.expect(jsonData.salary[0]).to.eql(+requestData.salary)
});
console.log("",jsonData.salary[0]);
console.log("reqdata",+requestData.salary)
//.11 Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Check salary_1*2",function (){
    pm.expect(+jsonData.salary[1]).to.eql((+requestData.salary)*2)
});
//.12 Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Check salary_2*3",function (){
    pm.expect(+jsonData.salary[2]).to.eql((+requestData.salary)*3)
});
//.13 Создать в окружении переменную name
//.14 Создать в окружении переменную age
//.15 Создать в окружении переменную salary
var name_1=jsonData.name
pm.environment.set("name1", name_1);
var age_1=jsonData.age
pm.environment.set("age1", age_1);
var salary_0=+jsonData.salary[0]
pm.environment.set("salary1", salary_0);

//.16 Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
var num=jsonData.salary;
console.log(num)

//for (num=0;num<3;num++){
   //console.log(num);
//};
for (var i=0;i<num.length;i++){
    console.log(i+0,jsonData.salary[i]);
    };

						//HW_2 POSTMAN (POST/user_info_2)
//1.Вставить параметр salary из окружения в request
//2.Вставить параметр age из окружения в age
//3.Вставить параметр name из окружения в name
//4.Отправить запрос.
//5.Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//6.Спарсить response body в json.
var pars_Respons=JSON.parse(responseBody);
//console.log(pars_Respons)
//7.Спарсить request.
var pars_Request=request.data;
//8.Проверить, что json response имеет параметр start_qa_salary
pm.test("JSON has start_qa_salary", function () {
    pm.expect(pars_Respons).to.have.property("start_qa_salary");
});
//9.Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("JSON has qa_salary_after_6_months", function () {
    pm.expect(pars_Respons).to.have.property("qa_salary_after_6_months");
});
//10.Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("JSON has qa_salary_after_12_months", function () {
    pm.expect(pars_Respons).to.have.property("qa_salary_after_12_months");
});
//11.Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("JSON has qa_salary_after_1.5_year", function () {
    pm.expect(pars_Respons).to.have.property("qa_salary_after_1.5_year");
});
//12.Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("JSON has qa_salary_after_3.5_years", function () {
    pm.expect(pars_Respons).to.have.property("qa_salary_after_3.5_years");
});
//13.Проверить, что json response имеет параметр person
pm.test("JSON has person", function () {
    pm.expect(pars_Respons).to.have.property("person");
});
//14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("start_qa_salary equal salary from request", function () {
    pm.expect(pars_Respons.start_qa_salary).to.eql(1*pars_Request.salary);
});
//15.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("qa_salary_after_6_months equal salary*2 from request", function () {
    pm.expect(pars_Respons.qa_salary_after_6_months).to.eql(1*pars_Request.salary*2);
});
//16.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("qa_salary_after_12_months equal salary*2.7 from request", function () {
    pm.expect(pars_Respons.qa_salary_after_12_months).to.eql(1*pars_Request.salary*2.7);
});
//17.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("qa_salary_after_1.5_year equal salary*3.3 from request", function () {
    pm.expect(pars_Respons["qa_salary_after_1.5_year"]).to.eql(1*pars_Request.salary*3.3);
});
//18.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("qa_salary_after_3.5_years equal salary*3.8 from request", function () {
    pm.expect(pars_Respons["qa_salary_after_3.5_years"]).to.eql(1*pars_Request.salary*3.8);
});
//19.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("person u_name[1] equal salary from request", function () {
    pm.expect(pars_Respons.person.u_name[1]).to.eql(1*pars_Request.salary);
});
//20.Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("person u_age equal age from request", function () {
    pm.expect(pars_Respons.person.u_age).to.eql(1*pars_Request.age);
});
//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("u_salary_5_years equal salary*4.2 from request", function () {
    pm.expect(pars_Respons.person.u_salary_5_years).to.eql(1*pars_Request.salary*4.2);
});
//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
var CP=pars_Respons.person;
for (var key in CP){
    console.log(key+":"+CP[key]);
    };





