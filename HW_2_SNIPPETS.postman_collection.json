{
	"info": {
		"_postman_id": "d85ca315-c991-4d45-8ab6-91fbc7a7151b",
		"name": "HW_2_SNIPPETS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//HW_2 Postman (/first)\r",
							"\r",
							"//1.Отправить запрос.\r",
							"//2.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3.Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//.1 Отправить запрос статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//.2 Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//.3 Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\",function (){\r",
							"    pm.expect(jsonData.name).to.eql(\"Olga\")\r",
							"});\r",
							"//.4 Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\",function (){\r",
							"  pm.expect(jsonData.age).to.eql(\"35\")  \r",
							"});\r",
							"//.5 Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(3500);\r",
							"});\r",
							"//.6 Спарсить request.\r",
							"var request_Data = request.data;\r",
							"//.7 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\",function (){\r",
							"    pm.expect(jsonData.name).to.eql(request.data.name)\r",
							"});\r",
							"//.8 Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\",function (){\r",
							"    pm.expect(jsonData.age).to.eql(request.data.age)\r",
							"});\r",
							"//.9 Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\",function (){\r",
							"    pm.expect(jsonData.salary).to.eql(+request.data.salary)\r",
							"});\r",
							"//.10 Вывести в консоль параметр family из response.\r",
							"var resp_family=jsonData.family\r",
							"console.log(\"resp_family:\"+resp_family);\r",
							"console.log(\"resp_family:\",resp_family);\r",
							"//.11 Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var request_Data = request.data;\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Check salary*4\",function (){\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.data.salary*4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Olga",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "3500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//.1 Отправить запрос статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//.2 Спарсить respons body в json\r",
							"var jsonData=pm.response.json();\r",
							"//.3 Спарсить request\r",
							"//var request_Data=request.data;\r",
							"var requestData=pm.request.url.query.toObject();\r",
							"//.4 Проверить, что name в ответе равно name с request (name забрать из request)\r",
							"pm.test(\"Check name\",function (){\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name)\r",
							"});\r",
							"//.5 Проверить, что age в ответе равно age с request (name забрать из request)\r",
							"pm.test(\"Check age\",function (){\r",
							"    pm.expect(jsonData.age).to.eql(requestData.age)\r",
							"});\r",
							"//.6 Проверить, что salary в ответе равно salary с request (salary забрать из request)\r",
							"pm.test(\"Check salary\",function (){\r",
							"    pm.expect(jsonData.salary).to.eql(+requestData.salary)\r",
							"});\r",
							"//.7 Вывести в консоль параметры family из response\r",
							"console.log (\"response:\",jsonData.family)\r",
							"//.8 Проверить, что у параметра dog есть параметры name\r",
							"var jsonData=pm.response.json();\r",
							"pm.test(\"Check dog has name\",function (){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"//.9 Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Check dog has age\",function (){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"//.10 Проверить, что у параметр name имеет значение Luky\r",
							"pm.test(\"Check dog_name Luky\",function (){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"//.11 Проверить, что у параметр age имеет значение 4\r",
							"pm.test(\"Check dog_age_4\",function (){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Olga&age=35&salary=3500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//.1 Отправить запрос статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//.2 Спарсить respons body В json\r",
							"var jsonData=pm.response.json();\r",
							"//.3 Спарсить request\r",
							"var requestData=pm.request.url.query.toObject();\r",
							"//.4 Проверить, что name в ответе равно name с request (name забрать из request)\r",
							"pm.test(\"Check name\",function (){\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name)\r",
							"});\r",
							"console.log(jsonData.name);\r",
							"//.5 Проверить, что age в ответе равно age с request (name забрать из request)\r",
							"pm.test(\"Check age\",function (){\r",
							"    pm.expect(jsonData.age).to.eql(+requestData.age)\r",
							"});\r",
							"//.6 Вывести в консоль параметры salary из response\r",
							"console.log (\"response:\",jsonData.salary)\r",
							"//.7 Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log (\"response:\",jsonData.salary[0])\r",
							"//.8 Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log (\"response:\",jsonData.salary[1])\r",
							"//.9 Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log (\"response:\",jsonData.salary[2])\r",
							"//.10 Проверить, что 0-й элемент параметра salary равен salary из request (salare забрать из request)\r",
							"pm.test(\"Check salary_0\",function (){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+requestData.salary)\r",
							"});\r",
							"console.log(\"\",jsonData.salary[0]);\r",
							"console.log(\"reqdata\",+requestData.salary)\r",
							"//.11 Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_1*2\",function (){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql((+requestData.salary)*2)\r",
							"});\r",
							"//.12 Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary_2*3\",function (){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql((+requestData.salary)*3)\r",
							"});\r",
							"//.13 Создать в окружении переменную name\r",
							"//.14 Создать в окружении переменную age\r",
							"//.15 Создать в окружении переменную salary\r",
							"var name_1=jsonData.name\r",
							"pm.environment.set(\"name1\", name_1);\r",
							"var age_1=jsonData.age\r",
							"pm.environment.set(\"age1\", age_1);\r",
							"var salary_0=+jsonData.salary[0]\r",
							"pm.environment.set(\"salary1\", salary_0);\r",
							"\r",
							"//.16 Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var num=jsonData.salary;\r",
							"console.log(num)\r",
							"\r",
							"//for (num=0;num<3;num++){\r",
							"   //console.log(num);\r",
							"//};\r",
							"for (var i=0;i<num.length;i++){\r",
							"    console.log(i+0,jsonData.salary[i]);\r",
							"    };\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Olga&age=35&salary=3500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//HW_2 POSTMAN (POST/user_info_2)\r",
							"//1.Вставить параметр salary из окружения в request\r",
							"//2.Вставить параметр age из окружения в age\r",
							"//3.Вставить параметр name из окружения в name\r",
							"//4.Отправить запрос.\r",
							"//5.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6.Спарсить response body в json.\r",
							"var pars_Respons=JSON.parse(responseBody);\r",
							"//console.log(pars_Respons)\r",
							"//7.Спарсить request.\r",
							"var pars_Request=request.data;\r",
							"//8.Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"JSON has start_qa_salary\", function () {\r",
							"    pm.expect(pars_Respons).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9.Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"JSON has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(pars_Respons).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10.Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"JSON has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(pars_Respons).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11.Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"JSON has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(pars_Respons).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12.Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"JSON has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(pars_Respons).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13.Проверить, что json response имеет параметр person\r",
							"pm.test(\"JSON has person\", function () {\r",
							"    pm.expect(pars_Respons).to.have.property(\"person\");\r",
							"});\r",
							"//14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary equal salary from request\", function () {\r",
							"    pm.expect(pars_Respons.start_qa_salary).to.eql(1*pars_Request.salary);\r",
							"});\r",
							"//15.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months equal salary*2 from request\", function () {\r",
							"    pm.expect(pars_Respons.qa_salary_after_6_months).to.eql(1*pars_Request.salary*2);\r",
							"});\r",
							"//16.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months equal salary*2.7 from request\", function () {\r",
							"    pm.expect(pars_Respons.qa_salary_after_12_months).to.eql(1*pars_Request.salary*2.7);\r",
							"});\r",
							"//17.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year equal salary*3.3 from request\", function () {\r",
							"    pm.expect(pars_Respons[\"qa_salary_after_1.5_year\"]).to.eql(1*pars_Request.salary*3.3);\r",
							"});\r",
							"//18.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years equal salary*3.8 from request\", function () {\r",
							"    pm.expect(pars_Respons[\"qa_salary_after_3.5_years\"]).to.eql(1*pars_Request.salary*3.8);\r",
							"});\r",
							"//19.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person u_name[1] equal salary from request\", function () {\r",
							"    pm.expect(pars_Respons.person.u_name[1]).to.eql(1*pars_Request.salary);\r",
							"});\r",
							"//20.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person u_age equal age from request\", function () {\r",
							"    pm.expect(pars_Respons.person.u_age).to.eql(1*pars_Request.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years equal salary*4.2 from request\", function () {\r",
							"    pm.expect(pars_Respons.person.u_salary_5_years).to.eql(1*pars_Request.salary*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var CP=pars_Respons.person;\r",
							"for (var key in CP){\r",
							"    console.log(key+\":\"+CP[key]);\r",
							"    };\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name1}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age1}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga",
							"disabled": true
						},
						{
							"key": "age",
							"value": "35",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "3500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}